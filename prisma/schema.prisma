generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int           @id @default(autoincrement())
  email                    String        @unique
  phone                    String        @unique
  role                     Role          @default(CLIENT)
  password                 String
  status                   Status        @default(PENDING)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  refreshToken             String?
  emailVerified            Boolean       @default(false)
  verificationToken        String?       @unique
  verificationTokenExpires DateTime?
  passwordResetExpires     DateTime?
  passwordResetToken       String?       @unique
  favorites                Favorite[]
  messagesReceived         Message[]     @relation("ReceivedMessages")
  messagesSent             Message[]     @relation("SentMessages")
  parking                  Parking?      @relation("ParkingManager")
  reservations             Reservation[]
  vehicles                 Vehicle[]     @relation("ClientVehicles")
}

model Parking {
  id               Int           @id @default(autoincrement())
  userId           Int           @unique
  name             String
  address          String
  phone            String?
  description      String?
  capacity         Int
  hoursOfOperation String?
  status           ParkingStatus @default(ACTIVE)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation("ParkingManager", fields: [userId], references: [id])
  vehicles         Vehicle[]     @relation("ParkingVehicles")
}

model Vehicle {
  id             Int              @id @default(autoincrement())
  parkingId      Int?
  marque         String
  prix           Float
  description    String
  photos         String[]
  garantie       Boolean
  dureeGarantie  Int?
  documents      String[]
  chauffeur      Boolean
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  assurance      String?
  carteGrise     String?
  dureeAssurance Int?
  userOwnerId    Int?
  vignette       String?
  status         VehicleStatus    @default(DISPONIBLE)
  favorites      Favorite[]
  reservations   Reservation[]
  parking        Parking?         @relation("ParkingVehicles", fields: [parkingId], references: [id])
  userOwner      User?            @relation("ClientVehicles", fields: [userOwnerId], references: [id])
  history        VehicleHistory[]
  stats          VehicleStats?

  @@index([userOwnerId])
  @@index([parkingId])
}

model Reservation {
  id         Int             @id @default(autoincrement())
  userId     Int
  vehicleId  Int
  dateDebut  DateTime
  dateFin    DateTime
  type       ReservationType
  commission Float?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  user       User            @relation(fields: [userId], references: [id])
  vehicle    Vehicle         @relation(fields: [vehicleId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model VehicleStats {
  id           Int      @id @default(autoincrement())
  vehicleId    Int      @unique
  vues         Int      @default(0)
  reservations Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  vehicle      Vehicle  @relation(fields: [vehicleId], references: [id])
}

model VehicleHistory {
  id        Int      @id @default(autoincrement())
  vehicleId Int
  changes   String
  createdAt DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  vehicleId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  @@unique([userId, vehicleId])
}

enum Role {
  CLIENT
  PARKING
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum ParkingStatus {
  ACTIVE
  INACTIVE
}

enum ReservationType {
  ACHAT
  LOCATION
}

enum VehicleStatus {
  DISPONIBLE
  EN_LOCATION
  ACHETE
  EN_MAINTENANCE
}